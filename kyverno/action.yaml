name: Kyverno
description: Apply policies against charts with Kyverno CLI
runs:
  using: "composite"
  steps:
    - name: Apply Kyverno policies
      shell: bash
      run: |
        export CHARTS_DIR=kubernetes/charts
        export OVERRIDES_DIR=kubernetes/deployments
        export KUBE_API_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
        TEAMS=$(curl -k "https://kubernetes.default:443/apis/tradeshift.com/v1/teams" -H "Authorization: Bearer $KUBE_API_TOKEN" | kyverno jp "items[*].spec.helmChartName")
        
        # Fetch the policies from K8s cluster
        for i in $(kubectl get clusterpolicies -o=name); do kubectl get $i -o yaml >> kyverno_policies.yaml && echo "---" >> kyverno_policies.yaml ;done
        
        # This context file will hold external data (e.g. team names) needed for validation rules.
        cat <<EOT >> kyverno_context.yaml
        policies:
          - name: require-deployment-annotations
            rules:
              - name: team-annotation
                values:
                  teams: ${TEAMS}
        EOT
        
        for CHART_PATH in ${CHARTS_DIR}/*; do
        
          # Update dependencies first
          if [[ ( -f "${CHART_PATH}/requirements.yaml" && ! -d "${CHART_PATH}/charts") || $(cat "${CHART_PATH}/Chart.yaml" | grep -E "dependencies:")  ]]; then
            helm dependencies update ${CHART_PATH}
          else
            echo "No external dependencies found for ${CHART_PATH}."
          fi
        
          CHART_NAME=$(basename ${CHART_PATH})
          for OVERRIDE_PATH in ${OVERRIDES_DIR}/*; do
            # reset FILE_NAME to "" for each loop
            FILE_NAME=""
            # if a dir does not start with eks, it's either a manifest for legacy cluster or a bogus dir
            if [[ $OVERRIDE_PATH == "kubernetes/deployments/eks"* ]]; then
              if test -f ${OVERRIDE_PATH}/${CHART_NAME}.config.yaml; then
                FILE_NAME="${OVERRIDE_PATH}/${CHART_NAME}.config.yaml"
              elif test -f ${OVERRIDE_PATH}/*_${CHART_NAME}.config.yaml; then
                FILE_NAME=$(find $OVERRIDE_PATH -maxdepth 1 -mindepth 1 -name "*_${CHART_NAME}.config.yaml")
              else
                echo "Could not find override yaml file in ${OVERRIDE_PATH} for ${CHART_NAME} chart (${CHART_PATH})."
              fi
            else
              echo "Unknown override file path: ${OVERRIDE_PATH}"
            fi
            # We specify git_hash, git_branch so that the rendered chart is as close to production environment as possible. Namespace, however, is specified at deploy time so we cannot figure it out at build time, therefore it's hardcoded. 
            helm template ${CHART_PATH} -f "${FILE_NAME}" --set git_hash=${{ github.event.pull_request.head.sha }} --set git_branch=${{ github.head_ref }} --set namespace=default | kyverno apply kyverno_policies.yaml --resource - -f kyverno_context.yaml
          done
        done
